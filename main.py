import asyncio

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command

from config import BOT_TOKEN


bot = Bot(token=BOT_TOKEN)

dp = Dispatcher()


@dp.message(Command("start"))
async def start(message: types.Message):
    kb=[
    [types.KeyboardButton(text="‚úÖ–ö—É–ø–∏—Ç—å –∫–Ω–∏–≥—É")],
     [types.KeyboardButton(text="‚úÖ–ü—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç—Ä—ã–≤–æ–∫")],
     [types.KeyboardButton(text="‚úÖ–£–∑–Ω–∞—Ç—å –æ–± –∞–≤—Ç–æ—Ä–µ")]
    ]
    markup = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.username}!\n"
                     "\n"
                     "üìñ –¢—ã –ø–æ–ø–∞–ª(–∞) –≤ –±–æ—Ç–∞ –∫–Ω–∏–≥–∏ –ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–ª–µ–Ω—ã\n"
                     "\n"
                     "–Ø —Ä–∞–±–æ—Ç–∞–ª –Ω–∞ —ç—Ç–æ–π –∫–Ω–∏–≥–æ–π....."
                     "–ö–Ω–∏–≥—É —Å –Ω–∞–ø–∏—Å–∞–ª, –∫–æ–≥–¥–∞ –±—ã–ª –ø—å—è–Ω...\n"
                     "–ù—É –±–ª–∏–Ω –≤—Å—ë\n"
                     "\n"
                     "‚ú® –ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?\n"
                     "‚úÖ –ö—É–ø–∏—Ç—å –∫–Ω–∏–≥—É ‚Äî –ø–æ–≥—Ä—É–∑–∏—Å—å –≤ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –º–∏—Ä [–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏].\n"
                     "‚úÖ –ü—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç—Ä—ã–≤–æ–∫ ‚Äî –ø–æ–ø—Ä–æ–±—É–π ¬´–Ω–∞ –≤–∫—É—Å¬ª –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π.\n"
                     "‚úÖ –£–∑–Ω–∞—Ç—å –æ–± –∞–≤—Ç–æ—Ä–µ ‚Äî –∫—Ç–æ —Å–æ–∑–¥–∞–ª —ç—Ç—É –∏—Å—Ç–æ—Ä–∏—é?\n"
                     "\n"
                     "üí¨ –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî —Å–º–µ–ª–æ –ø–∏—à–∏! –Ø –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏.üòä\n"
                    "\n"
                     "–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é, –∂–º–∏ /start‚ùó‚ùó‚ùó\n"
                     "\n"
                     "–ñ–µ–ª–∞—é –ø—Ä–∏—è—Ç–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è!üìöüí´",
                         reply_markup=markup)


@dp.message(F.text.lower()=="‚úÖ–∫—É–ø–∏—Ç—å –∫–Ω–∏–≥—É")
async def read(message: types.Message):
    await message.answer(
        "üìú–ñ–∏–ª–∏ –±—ã–ª–∏ –¥–µ–¥ –∏ –±–∞–±–∞\n"
        "–µ–ª–∏ –∫–∞—à—É —Å –º–æ–ª–æ–∫–æ–º\n" 
        "—Ä–∞—Å—Å–µ—Ä–¥–∏–ª—Å—è –¥–µ–¥ –Ω–∞ –±–∞–±—É\n"
        "–±–∞—Ü –ø–æ –ø—É–∑—É –∫—É–ª–∞–∫–æ–º\n"
        "–∞ –∏–∑ –ø—É–∑–∞ –¥–≤–∞ –∞—Ä–±—É–∑–∞ \n"
        "–ø–æ–∫–∞—Ç–∏–ª–∏—Å—å –ø–æ–¥ –∫—Ä–æ–≤–∞—Ç—å\n"
        "–∞ –∏–∑ –Ω–æ—Å–∞ –¥–≤–∞ –º–∞—Ç—Ä–æ—Å–∞\n"
        "–ø–æ–±–µ–∂–∞–ª–∏ —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å\n"
        "–ê –ß–¢–û –î–ê–õ–¨–®–ï? üòè\n"
        "üìñ –ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å? –ñ–º–∏ '‚úÖ–ö—É–ø–∏—Ç—å –∫–Ω–∏–≥—É' ‚Äî —É–∑–Ω–∞–µ—à—å, —á–µ–º –≤—Å—ë –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å!"
                         )


@dp.message(F.text.lower()=="‚úÖ–ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç—Ä—ã–≤–æ–∫")
async def buy(message: types.Message):
    await message.answer(
            "üíé –û—Ç–ª–∏—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞!\n"
            "\n"
            "–¢—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–¥–µ–ª–∞–ª(–∞) —à–∞–≥ –Ω–∞ –ø—É—Ç–∏ –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É!üåü\n"
            "\n"
            "üì≤ –û–ø–ª–∞—Ç–∏—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç: [—Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É]\n"
            "üí∞ –¶–µ–Ω–∞: [X] —Ä—É–±. (–∏–ª–∏ '–¥–æ–Ω–∞—Ç –Ω–∞ –∫–æ—Ñ–µ –∞–≤—Ç–æ—Ä—É ‚òï')\n"
            "\n"
            "üì¨ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∫–Ω–∏–≥–∞ –ø—Ä–∏–¥–µ—Ç —Ç–µ–±–µ –≤ PDF/EPUB/TXT\n"
            "‚ùó –í–∞–∂–Ω–æ: –ï—Å–ª–∏ –ø–∏—Å—å–º–æ –Ω–µ –ø—Ä–∏—à–ª–æ ‚Äî –ø—Ä–æ–≤–µ—Ä—å ¬´–°–ø–∞–º¬ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –º–Ω–µ!"
                         )


@dp.message(F.text.lower() == "‚úÖ—É–∑–Ω–∞—Ç—å –æ–± –∞–≤—Ç–æ—Ä–µ")
async def learn(message: types.Message):
    await message.answer(
        "‚ù§Ô∏è –õ—é–±–ª—é –í–µ—Ç—É!!!\n"
        "‚ù§Ô∏è –õ—é–±–ª—é –í–µ—Ç—É!!!\n"
        "‚ù§Ô∏è –õ—é–±–ª—é –í–µ—Ç—É!!!\n"
        "‚ù§Ô∏è –õ—é–±–ª—é –í–µ—Ç—É!!!\n"
        "‚ù§Ô∏è –õ—é–±–ª—é –í–µ—Ç—É!!!\n"
        "‚ù§Ô∏è –õ—é–±–ª—é –í–µ—Ç—É!!!\n"
        "‚ù§Ô∏è –õ—é–±–ª—é –í–µ—Ç—É!!!\n"
        "‚ù§Ô∏è –õ—é–±–ª—é –í–µ—Ç—É!!!\n"
        "‚ù§Ô∏è –õ—é–±–ª—é –í–µ—Ç—É!!!\n"
        "‚ù§Ô∏è –õ—é–±–ª—é –í–µ—Ç—É!!!\n"
    )


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())